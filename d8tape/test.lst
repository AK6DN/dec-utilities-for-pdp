
      simple MEMORY test                                                  Page 1


    1             TITLE   "simple MEMORY test"
    2             /
    3             / start at 200
    4             /
    5             / switch definitions
    6             /
    7             /   <0>     0=BELL at EOP / 1=silent
    8             /   <1>     0=RUN / 1=STOP and restore loaders
    9             /   <2:5>   0=all tests / !0=exec this test only
   10             /   <6:8>   unused
   11             /   <9:11>  FIELD to test, 0...7
   12             /
   13             / ------------------------------------------------------------
   14             
   15             / macro definitions
   16             
   17             DEFINE SDF N <
   18                      N^10+CDF >
   19             
   20             DEFINE SIF N <
   21                      N^10+CIF >
   22             
   23             / ------------------------------------------------------------
   24             
   25       0000  *0
   26 00000 7402  INIT,   HLT                     / should never get here
   27 00001 7402          HLT                     / should never get here
   28 00002 7402          HLT                     / should never get here
   29 00003 7402          HLT                     / should never get here
   30             
   31       0040  *40
   32 00040 0001  SSR,    0001                    / software switch register
   33 00041 0000  PTR,    0                       / memory ptr
   34 00042 0000  TMP1,   0                       / for print routines
   35 00043 0000  TMP2,   0                       / ditto
   36 00044 0000  TMP3,   0                       / ditto
   37 00045 0000  TMP4,   0                       / ditto
   38 00046 0000  EXP,    0                       / expected data
   39 00047 0000  RCV,    0                       / received data
   40 00050 0000  TEST,   0                       / test number
   41 00051 0000  PASSES, 0                       / pass count
   42 00052 0000  ERRORS, 0                       / error count
   43 00053 0000  MEMBEG, 0                       / start location (computed)
   44 00054 7777  MEMEND, 7777                    / last location to test
   45 00055 0000  MEMCNT, 0                       / -count of locations (computed)
   46             
   47       7014  R3L=7014 / on HD6120 only
   48             

      simple MEMORY test                                                  Page 2


   49                     EJECT
   50             / ------------------------------------------------------------
   51             /
   52             / set DF to test value
   53             
   54 00056 0000  SETTDF, 0                       / return address
   55                     SDF 5                   / (replaced during init)
   55 00057 6251           5^10+CDF 
   56                     SDF 4                   /
   56 00060 6241           4^10+CDF 
   57                     SDF 5                   /
   57 00061 6251           5^10+CDF 
   58 00062 5456          JMP I SETTDF            / return
   59             
   60             / ------------------------------------------------------------
   61             /
   62             / set DF to current value
   63             
   64 00063 0000  SETCDF, 0                       / return address
   65                     SIF 5                   / (replaced during init)
   65 00064 6252           5^10+CIF 
   66                     SIF 4                   /
   66 00065 6242           4^10+CIF 
   67                     SIF 5                   /
   67 00066 6252           5^10+CIF 
   68 00067 5463          JMP I SETCDF            / return
   69             
   70                     PAGE

      simple MEMORY test                                                  Page 3


   71                     EJECT
   72             / ------------------------------------------------------------
   73             
   74       0200  *200
   75 00200 7300  START,  CLA CLL                 / zero
   76 00201 7303          CLA CLL IAC BSW         / AC=100
   77 00202 3051          DCA PASSES              / init passcount
   78 00203 3052          DCA ERRORS              / init errorcount
   79 00204 6040          TFL                     / enable printing
   80             
   81 00205 1177          TAD [-200               / this many words in bootstrap
   82 00206 4576          JMS I [CPMEM            / copy memory
   83 00207 0000            0^10                  / src field
   84 00210 7600            7600                  / last page
   85 00211 0000            0^10                  / dst field
   86 00212 1600            LOADER                / copy to here
   87 00213 7410          SKP                     / should return here
   88 00214 7402           HLT                    / should not happen
   89             
   90             / ------------------------------------------------------------
   91             
   92 00215 7200  LOOP,   CLA                     / zero
   93 00216 1051          TAD PASSES              / get passcount
   94 00217 0175          AND [0007               / low 3 bits
   95 00220 1174          TAD [6440               / make into led IOT
   96 00221 3225          DCA LEDS                / store below
   97 00222 7215          CLA IAC R3L             / generate 0010 on HD6120 only
   98 00223 1173          TAD [-10                / expected
   99 00224 7450          SNA                     / skip if matches
  100 00225 7402  LEDS,    HLT                    / SBC6120 cpu, light leds
  101             
  102 00226 4572          JMS I [READSR           / get switch register
  103 00227 7006          RTL ; RAL               / shift left 3
      00230 7004
  104 00231 0171          AND [0070               / mask to 3b field
  105 00232 1170          TAD [CDF                / make CDF <N> instr
  106 00233 3057          DCA SETTDF+1            / store into setup routine
  107 00234 6214          RDF                     / get current DF
  108 00235 1170          TAD [CDF                / make CDF <N> instr
  109 00236 3064          DCA SETCDF+1            / store into restore routine
  110 00237 3050          DCA TEST                / init test number
  111 00240 5567          JMP I [TST1             / start
  112             
  113                     PAGE

      simple MEMORY test                                                  Page 4


  114                     EJECT
  115             /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  116             
  117             / TEST 1 - incr count pattern, incr address
  118             /
  119             /    pattern is (0000...7777) + PASSES
  120             
  121 00400 4566  TST1,   JMS I [CHKTST           / check test number
  122 00401 7777           -1                     / should be this one
  123 00402 0435           TST2                   / return here to skip test
  124             
  125 00403 4565          JMS I [SETUPI           / setup data field
  126 00404 7421  TST1A,  MQL ; MQA               / save pattern in MQ
      00405 7501
  127 00406 3441          DCA I PTR               / store data pattern
  128 00407 7501          MQA ; IAC               / restore pattern and bump
      00410 7001
  129 00411 4564          JMS I [PTRINC           / bump ptr
  130 00412 2055          ISZ MEMCNT              / bump count
  131 00413 5204           JMP TST1A              / loop if hasn't wrapped
  132             
  133 00414 4565          JMS I [SETUPI           / setup data field
  134 00415 7421  TST1B,  MQL ; MQA               / save pattern in MQ
      00416 7501
  135 00417 7041          CIA                     / invert pattern for test
  136 00420 1441          TAD I PTR               / get data pattern
  137 00421 7450          SNA                     / OK if AC is zero
  138 00422 5227           JMP TST1C              / jump if OK
  139 00423 3047          DCA RCV                 / save received
  140 00424 7501          MQA                     / get pattern
  141 00425 3046          DCA EXP                 / save expected
  142 00426 4563          JMS I [PRTERR           / ***ERROR***
  143 00427 7501  TST1C,  MQA ; IAC               / restore pattern and bump
      00430 7001
  144 00431 4564          JMS I [PTRINC           / bump ptr
  145 00432 2055          ISZ MEMCNT              / bump count
  146 00433 5215           JMP TST1B              / loop if hasn't wrapped
  147             
  148 00434 4063          JMS SETCDF              / back to normal
  149             

      simple MEMORY test                                                  Page 5


  150                     EJECT
  151             /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  152             
  153             / TEST 2 - incr count pattern, decr address
  154             /
  155             /    pattern is (0000...7777) + PASSES
  156             
  157 00435 4566  TST2,   JMS I [CHKTST           / check test number
  158 00436 7776           -2                     / should be this one
  159 00437 0472           TST3                   / return here to skip test
  160             
  161 00440 4562          JMS I [SETUPD           / setup data field
  162 00441 7421  TST2A,  MQL ; MQA               / save pattern in MQ
      00442 7501
  163 00443 3441          DCA I PTR               / store data pattern
  164 00444 7501          MQA ; IAC               / restore pattern and bump
      00445 7001
  165 00446 4561          JMS I [PTRDEC           / bump ptr
  166 00447 2055          ISZ MEMCNT              / bump count
  167 00450 5241           JMP TST2A              / loop if hasn't wrapped
  168             
  169 00451 4562          JMS I [SETUPD           / setup data field
  170 00452 7421  TST2B,  MQL ; MQA               / save pattern in MQ
      00453 7501
  171 00454 7041          CIA                     / invert pattern for test
  172 00455 1441          TAD I PTR               / get data pattern
  173 00456 7450          SNA                     / OK if AC is zero
  174 00457 5264           JMP TST2C              / jump if OK
  175 00460 3047          DCA RCV                 / save received
  176 00461 7501          MQA                     / get pattern
  177 00462 3046          DCA EXP                 / save expected
  178 00463 4563          JMS I [PRTERR           / ***ERROR***
  179 00464 7501  TST2C,  MQA ; IAC               / restore pattern and bump
      00465 7001
  180 00466 4561          JMS I [PTRDEC           / bump ptr
  181 00467 2055          ISZ MEMCNT              / bump count
  182 00470 5252           JMP TST2B              / loop if hasn't wrapped
  183             
  184 00471 4063          JMS SETCDF              / back to normal
  185             

      simple MEMORY test                                                  Page 6


  186                     EJECT
  187             /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  188             
  189             / TEST 3 - incr/shifted count pattern, incr addr
  190             /
  191             /    pattern is (0000...7777) rotl (PASSES%16) + PASSES
  192             
  193 00472 4566  TST3,   JMS I [CHKTST           / check test number
  194 00473 7775           -3                     / should be this one
  195 00474 0532           TST4                   / return here to skip test
  196             
  197 00475 4565          JMS I [SETUPI           / setup data field
  198 00476 7421  TST3A,  MQL ; MQA               / save pattern in MQ
      00477 7501
  199 00500 4560          JMS I [ROTPAT           / rotate AC left by PASSES%16
  200 00501 3441          DCA I PTR               / store data pattern
  201 00502 7501          MQA ; IAC               / restore pattern and bump
      00503 7001
  202 00504 4564          JMS I [PTRINC           / bump ptr
  203 00505 2055          ISZ MEMCNT              / bump count
  204 00506 5276           JMP TST3A              / loop if hasn't wrapped
  205             
  206 00507 4565          JMS I [SETUPI           / setup data field
  207 00510 7421  TST3B,  MQL ; MQA               / save pattern in MQ
      00511 7501
  208 00512 4560          JMS I [ROTPAT           / rotate AC left by PASSES%16
  209 00513 7041          CIA                     / invert pattern for test
  210 00514 1441          TAD I PTR               / get data pattern
  211 00515 7450          SNA                     / OK if AC is zero
  212 00516 5324           JMP TST3C              / jump if OK
  213 00517 3047          DCA RCV                 / save received
  214 00520 7501          MQA                     / get pattern
  215 00521 4560          JMS I [ROTPAT           / rotate AC left by PASSES%16
  216 00522 3046          DCA EXP                 / save expected
  217 00523 4563          JMS I [PRTERR           / ***ERROR***
  218 00524 7501  TST3C,  MQA ; IAC               / restore pattern and bump
      00525 7001
  219 00526 4564          JMS I [PTRINC           / bump ptr
  220 00527 2055          ISZ MEMCNT              / bump count
  221 00530 5310           JMP TST3B              / loop if hasn't wrapped
  222             
  223 00531 4063          JMS SETCDF              / back to normal
  224             

      simple MEMORY test                                                  Page 7


  225                     EJECT
  226             /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  227             
  228             / TEST 4 - incr/shifted count pattern, decr addr
  229             /
  230             /    pattern is (0000...7777) rotl (PASSES%16) + PASSES
  231             
  232 00532 4566  TST4,   JMS I [CHKTST           / check test number
  233 00533 7774           -4                     / should be this one
  234 00534 0572           TST5                   / return here to skip test
  235             
  236 00535 4562          JMS I [SETUPD           / setup data field
  237 00536 7421  TST4A,  MQL ; MQA               / save pattern in MQ
      00537 7501
  238 00540 4560          JMS I [ROTPAT           / rotate AC left by PASSES%16
  239 00541 3441          DCA I PTR               / store data pattern
  240 00542 7501          MQA ; IAC               / restore pattern and bump
      00543 7001
  241 00544 4561          JMS I [PTRDEC           / bump ptr
  242 00545 2055          ISZ MEMCNT              / bump count
  243 00546 5336           JMP TST4A              / loop if hasn't wrapped
  244             
  245 00547 4562          JMS I [SETUPD           / setup data field
  246 00550 7421  TST4B,  MQL ; MQA               / save pattern in MQ
      00551 7501
  247 00552 4560          JMS I [ROTPAT           / rotate AC left by PASSES%16
  248 00553 7041          CIA                     / invert pattern for test
  249 00554 1441          TAD I PTR               / get data pattern
  250 00555 7450          SNA                     / OK if AC is zero
  251 00556 5364           JMP TST4C              / jump if OK
  252 00557 3047          DCA RCV                 / save received
  253 00560 7501          MQA                     / get pattern
  254 00561 4560          JMS I [ROTPAT           / rotate AC left by PASSES%16
  255 00562 3046          DCA EXP                 / save expected
  256 00563 4563          JMS I [PRTERR           / ***ERROR***
  257 00564 7501  TST4C,  MQA ; IAC               / restore pattern and bump
      00565 7001
  258 00566 4561          JMS I [PTRDEC           / bump ptr
  259 00567 2055          ISZ MEMCNT              / bump count
  260 00570 5350           JMP TST4B              / loop if hasn't wrapped
  261             
  262 00571 4063          JMS SETCDF              / back to normal
  263             

      simple MEMORY test                                                  Page 8


  264                     EJECT
  265             /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  266             
  267             / TEST 5 - decr/shifted count pattern, incr addr
  268             /
  269             /    pattern is (7777...0000) rotl (PASSES%16) + PASSES
  270             
  271 00572 4566  TST5,   JMS I [CHKTST           / check test number
  272 00573 7773           -5                     / should be this one
  273 00574 0634           TST6                   / return here to skip test
  274             
  275 00575 4565          JMS I [SETUPI           / setup data field
  276 00576 7421  TST5A,  MQL ; MQA               / save pattern in MQ
      00577 7501
  277 00600 4560          JMS I [ROTPAT           / rotate AC left by PASSES%16
  278 00601 7040          CMA                     / and invert
  279 00602 3441          DCA I PTR               / store data pattern
  280 00603 7501          MQA ; IAC               / restore pattern and bump
      00604 7001
  281 00605 4564          JMS I [PTRINC           / bump ptr
  282 00606 2055          ISZ MEMCNT              / bump count
  283 00607 5777@          JMP TST5A              / loop if hasn't wrapped
  284             
  285 00610 4565          JMS I [SETUPI           / setup data field
  286 00611 7421  TST5B,  MQL ; MQA               / save pattern in MQ
      00612 7501
  287 00613 4560          JMS I [ROTPAT           / rotate AC left by PASSES%16
  288 00614 7001          IAC                     / invert pattern for test
  289 00615 1441          TAD I PTR               / get data pattern
  290 00616 7450          SNA                     / OK if AC is zero
  291 00617 5226           JMP TST5C              / jump if OK
  292 00620 3047          DCA RCV                 / save received
  293 00621 7501          MQA                     / get pattern
  294 00622 4560          JMS I [ROTPAT           / rotate AC left by PASSES%16
  295 00623 7040          CMA                     / and invert
  296 00624 3046          DCA EXP                 / save expected
  297 00625 4563          JMS I [PRTERR           / ***ERROR***
  298 00626 7501  TST5C,  MQA ; IAC               / restore pattern and bump
      00627 7001
  299 00630 4564          JMS I [PTRINC           / bump ptr
  300 00631 2055          ISZ MEMCNT              / bump count
  301 00632 5211           JMP TST5B              / loop if hasn't wrapped
  302             
  303 00633 4063          JMS SETCDF              / back to normal
  304             

      simple MEMORY test                                                  Page 9


  305                     EJECT
  306             /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  307             
  308             / TEST 6 - decr/shifted count pattern, decr addr
  309             /
  310             /    pattern is (7777...0000) rotl (PASSES%16) + PASSES
  311             
  312 00634 4566  TST6,   JMS I [CHKTST           / check test number
  313 00635 7772           -6                     / should be this one
  314 00636 0676           TST7                   / return here to skip test
  315             
  316 00637 4562          JMS I [SETUPD           / setup data field
  317 00640 7421  TST6A,  MQL ; MQA               / save pattern in MQ
      00641 7501
  318 00642 4560          JMS I [ROTPAT           / rotate AC left by PASSES%16
  319 00643 7040          CMA                     / and invert
  320 00644 3441          DCA I PTR               / store data pattern
  321 00645 7501          MQA ; IAC               / restore pattern and bump
      00646 7001
  322 00647 4561          JMS I [PTRDEC           / bump ptr
  323 00650 2055          ISZ MEMCNT              / bump count
  324 00651 5240           JMP TST6A              / loop if hasn't wrapped
  325             
  326 00652 4562          JMS I [SETUPD           / setup data field
  327 00653 7421  TST6B,  MQL ; MQA               / save pattern in MQ
      00654 7501
  328 00655 4560          JMS I [ROTPAT           / rotate AC left by PASSES%16
  329 00656 7001          IAC                     / invert pattern for test
  330 00657 1441          TAD I PTR               / get data pattern
  331 00660 7450          SNA                     / OK if AC is zero
  332 00661 5270           JMP TST6C              / jump if OK
  333 00662 3047          DCA RCV                 / save received
  334 00663 7501          MQA                     / get pattern
  335 00664 4560          JMS I [ROTPAT           / rotate AC left by PASSES%16
  336 00665 7040          CMA                     / and invert
  337 00666 3046          DCA EXP                 / save expected
  338 00667 4563          JMS I [PRTERR           / ***ERROR***
  339 00670 7501  TST6C,  MQA ; IAC               / restore pattern and bump
      00671 7001
  340 00672 4561          JMS I [PTRDEC           / bump ptr
  341 00673 2055          ISZ MEMCNT              / bump count
  342 00674 5253           JMP TST6B              / loop if hasn't wrapped
  343             
  344 00675 4063          JMS SETCDF              / back to normal
  345             

      simple MEMORY test                                                 Page 10


  346                     EJECT
  347             /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  348             
  349             / TEST 7 - random data pattern, incr addr
  350             /
  351             /    pattern is (AC<-29*AC+1001) + PASSES
  352             
  353 00676 4566  TST7,   JMS I [CHKTST           / check test number
  354 00677 7771           -7                     / should be this one
  355 00700 0727           TST10                  / return here to skip test
  356             
  357 00701 4565          JMS I [SETUPI           / setup data field
  358 00702 7421          MQL                     / save seed in MQ, clear AC
  359 00703 4557  TST7A,  JMS I [RAND2            / AC,MQ <- 29*MQ+1001
  360 00704 3441          DCA I PTR               / store data pattern
  361 00705 4564          JMS I [PTRINC           / bump ptr
  362 00706 2055          ISZ MEMCNT              / bump count
  363 00707 5303           JMP TST7A              / loop if hasn't wrapped
  364             
  365 00710 4565          JMS I [SETUPI           / setup data field
  366 00711 7421          MQL                     / save seed in MQ, clear AC
  367 00712 4557  TST7B,  JMS I [RAND2            / AC,MQ <- 29*MQ+1001
  368 00713 7041          CIA                     / negate pattern for test
  369 00714 1441          TAD I PTR               / get data pattern
  370 00715 7450          SNA                     / OK if AC is zero
  371 00716 5323           JMP TST7C              / jump if OK
  372 00717 3047          DCA RCV                 / save received
  373 00720 7501          MQA                     / get pattern
  374 00721 3046          DCA EXP                 / save expected
  375 00722 4563          JMS I [PRTERR           / ***ERROR***
  376 00723 4564  TST7C,  JMS I [PTRINC           / bump ptr
  377 00724 2055          ISZ MEMCNT              / bump count
  378 00725 5312           JMP TST7B              / loop if hasn't wrapped
  379             
  380 00726 4063          JMS SETCDF              / back to normal
  381             

      simple MEMORY test                                                 Page 11


  382                     EJECT
  383             /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  384             
  385             / TEST 10 - random data pattern, decr addr
  386             /
  387             /    pattern is (AC<-29*AC+1001) + PASSES
  388             
  389 00727 4566  TST10,  JMS I [CHKTST           / check test number
  390 00730 7770           -10                    / should be this one
  391 00731 1000           EOP                    / return here to skip test
  392             
  393 00732 4562          JMS I [SETUPD           / setup data field
  394 00733 7421          MQL                     / save seed in MQ, clear AC
  395 00734 4557  TST10A, JMS I [RAND2            / AC,MQ <- 29*MQ+1001
  396 00735 3441          DCA I PTR               / store data pattern
  397 00736 4561          JMS I [PTRDEC           / bump ptr
  398 00737 2055          ISZ MEMCNT              / bump count
  399 00740 5334           JMP TST10A             / loop if hasn't wrapped
  400             
  401 00741 4562          JMS I [SETUPD           / setup data field
  402 00742 7421          MQL                     / save seed in MQ, clear AC
  403 00743 4557  TST10B, JMS I [RAND2            / AC,MQ <- 29*MQ+1001
  404 00744 7041          CIA                     / negate pattern for test
  405 00745 1441          TAD I PTR               / get data pattern
  406 00746 7450          SNA                     / OK if AC is zero
  407 00747 5354           JMP TST10C             / jump if OK
  408 00750 3047          DCA RCV                 / save received
  409 00751 7501          MQA                     / get pattern
  410 00752 3046          DCA EXP                 / save expected
  411 00753 4563          JMS I [PRTERR           / ***ERROR***
  412 00754 4561  TST10C, JMS I [PTRDEC           / bump ptr
  413 00755 2055          ISZ MEMCNT              / bump count
  414 00756 5343           JMP TST10B             / loop if hasn't wrapped
  415             
  416 00757 4063          JMS SETCDF              / back to normal
  417 00760 5556          JMP I [EOP              / done
  418             
      00777 0576
  419                     PAGE

      simple MEMORY test                                                 Page 12


  420                     EJECT
  421             / ------------------------------------------------------------
  422             
  423             /////// END OF PASS ///////
  424             
  425 01000 2051  EOP,    ISZ PASSES              / count passes
  426 01001 7410           SKP                    / don't let it be zero
  427 01002 5200            JMP .-2               / again
  428             
  429 01003 7200          CLA                     / zero
  430 01004 1177          TAD [-200               / restore bootstrap from saved
  431 01005 4576          JMS I [CPMEM            / copy memory
  432 01006 0000            0^10                  / src field
  433 01007 1600            LOADER                / copy to here
  434 01010 0000            0^10                  / dst field
  435 01011 7600            7600                  / last page
  436             
  437 01012 4572          JMS I [READSR           / get switches
  438 01013 7500          SMA                     / skip on SR<0> set
  439 01014 4555           JMS I [PRBEL           / ring BELL if bit0 clear
  440 01015 4554          JMS I [PRAST            / print message
  441 01016 1044           EOPM1                  / from here
  442 01017 1051          TAD PASSES              / get passcount
  443 01020 4553          JMS I [PROCT            / print octal
  444 01021 4554          JMS I [PRAST            / print message
  445 01022 1051           EOPM2                  / from here
  446 01023 1057          TAD SETTDF+1            / field we are testing
  447 01024 7112          CLL RTR ; RAR           / shift right three bits
      01025 7010
  448 01026 0175          AND [0007               / one digit
  449 01027 1152          TAD [0260               / make ascii
  450 01030 4551          JMS I [PRCHR            / print
  451 01031 4554          JMS I [PRAST            / print message
  452 01032 1055           EOPM3                  / from here
  453 01033 1052          TAD ERRORS              / get errorcount
  454 01034 4553          JMS I [PROCT            / print octal
  455 01035 4550          JMS I [PREOL            / print end of line
  456             
  457 01036 4572          JMS I [READSR           / get switches again
  458 01037 7006          RTL                     / isolate SR<1> halt switch
  459 01040 7420          SNL                     / skip if set
  460 01041 5547           JMP I [LOOP            / keep going
  461 01042 7402          HLT                     / halt
  462 01043 5547          JMP I [LOOP             / restart
  463             
  464 01044 0516  EOPM1,  TEXT "END PASS "
      01045 0440
      01046 2001
      01047 2323
      01050 4000
  465 01051 4006  EOPM2,  TEXT " FIELD "
      01052 1105
      01053 1404
      01054 4000
  466 01055 4005  EOPM3,  TEXT " ERRORS "
      01056 2222
      01057 1722

      simple MEMORY test                                                 Page 13


      01060 2340
      01061 0000
  467             

      simple MEMORY test                                                 Page 14


  468                     EJECT
  469             / ------------------------------------------------------------
  470             /
  471             / check test number sequence
  472             /
  473             /   first word is negative of expected test number
  474             /   second word is addr of where to go to if skipping this test
  475             /
  476             /   uses indirect data address mode
  477             
  478 01062 0000  CHKTST, 0                       / return address
  479 01063 7300          CLA CLL                 / clear AC LK
  480 01064 2050          ISZ TEST                / bump test number
  481 01065 1050          TAD TEST                / and get it to AC      
  482 01066 1662          TAD I CHKTST            / add negative of expected number
  483 01067 7440          SZA                     / should be zero...
  484 01070 7402           HLT                    / ***ERROR***
  485 01071 4572          JMS I [READSR           / get switches
  486 01072 0146          AND [1700               / mask to bits 2-5 only
  487 01073 7450          SNA                     / skip if not zero
  488 01074 5304           JMP CHK2               / zero - execute all tests
  489 01075 1662          TAD I CHKTST            / compare current:selected
  490 01076 7650          SNA CLA                 / skip if not equal
  491 01077 5304           JMP CHK2               / jmp if equal; execute test
  492 01100 2262          ISZ CHKTST              / point to skip-test address
  493 01101 1662          TAD I CHKTST            / get address
  494 01102 3262          DCA CHKTST              / store as return
  495 01103 5662          JMP I CHKTST            / return
  496 01104 2262  CHK2,   ISZ CHKTST              / point to skip-test address
  497 01105 2262          ISZ CHKTST              / point to normal return
  498 01106 5662          JMP I CHKTST            / return
  499                     

      simple MEMORY test                                                 Page 15


  500                     EJECT
  501             / ------------------------------------------------------------
  502             /
  503             / circular rotate AC left by PASSES%16
  504             /
  505             /   return with AC updated
  506             /   uses TMP1-2
  507             
  508       0042  SAVEAC=TMP1
  509       0043  COUNT=TMP2
  510             
  511 01107 0000  ROTPAT, 0                       / return address
  512 01110 3042          DCA SAVEAC              / save AC
  513 01111 1051          TAD PASSES              / get passcount
  514 01112 0145          AND [17                 / mask to low 4 bits
  515 01113 7040          CMA                     / change to 7777..7760 range
  516 01114 3043          DCA COUNT               / save counter
  517 01115 1042          TAD SAVEAC              / get value     
  518 01116 7104  ROT1,   CLL RAL                 / LK|AC<<1
  519 01117 7430          SZL                     / check bit shifted out
  520 01120 7001           IAC                    / was 1, insert into bit11
  521 01121 2043          ISZ COUNT               / count
  522 01122 5316           JMP ROT1               / loop if more
  523 01123 5707          JMP I ROTPAT            / return
  524             

      simple MEMORY test                                                 Page 16


  525                     EJECT
  526             / ------------------------------------------------------------
  527             /
  528             / generate random number
  529             /
  530             /   return with AC,MQ <- 29*MQ + 1001
  531             /   uses TMP1-2
  532             
  533       0042  COUNT=TMP1
  534       0043  MULT=TMP2
  535             
  536 01124 0000  RAND1,  0                       / return address
  537 01125 7200          CLA                     / zap
  538 01126 1144          TAD [-35                / -29
  539 01127 3042          DCA COUNT               / init multiplier
  540 01130 7701          CLA MQA                 / AC <- MQ
  541 01131 3043          DCA MULT                / init multiplicand
  542 01132 1043  RAND1A, TAD MULT                / add multiplicand
  543 01133 2042          ISZ COUNT               / decr multiplier
  544 01134 5332           JMP RAND1A             / loop
  545 01135 1143          TAD [1751               / +1001
  546 01136 7421          MQL ; MQA               / MQ <- AC ; AC <- MQ
      01137 7501
  547 01140 5724          JMP I RAND1             / return
  548             
  549             / ------------------------------------------------------------
  550             /
  551             / generate random number
  552             /
  553             /   return with AC,MQ <- 29*MQ + 1001
  554             /   uses TMP1-2
  555             
  556       0042  MULT=TMP1
  557             
  558 01141 0000  RAND2,  0                       / return address
  559 01142 7701          CLA MQA                 / AC <- MQ
  560 01143 3042          DCA MULT                / init multiplicand
  561 01144 1042          TAD MULT                / *1
  562 01145 7104          CLL RAL                 / *2
  563 01146 7104          CLL RAL                 / *4
  564 01147 1042          TAD MULT                / *5
  565 01150 1042          TAD MULT                / *6
  566 01151 1042          TAD MULT                / *7
  567 01152 7104          CLL RAL                 / *14
  568 01153 7104          CLL RAL                 / *28
  569 01154 1042          TAD MULT                / *29
  570 01155 1143          TAD [1751               / +1001
  571 01156 7421          MQL ; MQA               / MQ <- AC ; AC <- MQ
      01157 7501
  572 01160 5741          JMP I RAND2             / return
  573             
  574                     PAGE

      simple MEMORY test                                                 Page 17


  575                     EJECT
  576             / ------------------------------------------------------------
  577             /
  578             / print error message
  579             /
  580             /   return with AC=0
  581             
  582 01200 0000  PRTERR, 0                       / return address
  583 01201 7200          CLA                     / zero
  584 01202 1052          TAD ERRORS              / get error count
  585 01203 0145          AND [17                 / get low four bits
  586 01204 7640          SZA CLA                 / test
  587 01205 5212           JMP PRTER1             / skip print
  588 01206 4063          JMS SETCDF              / back to current DF
  589 01207 4554          JMS I [PRAST            / print text
  590 01210 1246           PRTER2                 / header
  591 01211 4056          JMS SETTDF              / back to test DF
  592 01212 1051  PRTER1, TAD PASSES              / get passcount
  593 01213 4553          JMS I [PROCT            / print octal
  594 01214 4542          JMS I [PRSPA            / print a space
  595 01215 1052          TAD ERRORS              / get error count
  596 01216 4553          JMS I [PROCT            / print octal
  597 01217 4542          JMS I [PRSPA            / print space
  598 01220 1050          TAD TEST                / get test number
  599 01221 4553          JMS I [PROCT            / print octal
  600 01222 4542          JMS I [PRSPA            / print a space
  601 01223 6214          RDF                     / get data field
  602 01224 7112          CLL RTR ; RAR           / shift right three bits
      01225 7010
  603 01226 1152          TAD [0260               / make ascii
  604 01227 4551          JMS I [PRCHR            / print
  605 01230 1041          TAD PTR                 / get test address
  606 01231 4553          JMS I [PROCT            / print octal
  607 01232 4542          JMS I [PRSPA            / print a space
  608 01233 1046          TAD EXP                 / get expected
  609 01234 4553          JMS I [PROCT            / print octal
  610 01235 4542          JMS I [PRSPA            / print a space
  611 01236 1047          TAD RCV                 / received data
  612 01237 1046          TAD EXP                 / add back expected
  613 01240 4553          JMS I [PROCT            / print octal
  614 01241 4550          JMS I [PREOL            / end of line
  615 01242 2052          ISZ ERRORS              / count errors
  616 01243 7410           SKP                    / 
  617 01244 5242            JMP .-2               / don't let go to zero
  618 01245 5600          JMP I PRTERR            / return
  619             
  620 01246 3720  PRTER2, TEXT "_PASS ERRS TEST ADDRS EXPD RCVD_"
      01247 0123
      01250 2340
      01251 0522
      01252 2223
      01253 4024
      01254 0523
      01255 2440
      01256 0104
      01257 0422
      01260 2340

      simple MEMORY test                                                 Page 18


      01261 0530
      01262 2004
      01263 4022
      01264 0326
      01265 0437
      01266 0000
  621             

      simple MEMORY test                                                 Page 19


  622                     EJECT
  623             / ------------------------------------------------------------
  624             /
  625             / copy memory from SRC to DST for COUNT
  626             /
  627             /   call:  TAD (-COUNT
  628             /          JMS CPMEM
  629             /            SRCFIELD<6:8>
  630             /            SRCADDRESS<0:11>
  631             /            DSTFIELD<6:8>
  632             /            DSTADDRESS<0:11>
  633             /   return with AC=0
  634             /   uses indirect data address mode
  635             
  636 01267 0000  CPMEM,  0                       / return address
  637 01270 3333          DCA CPMEMX              / save count
  638 01271 6214          RDF                     / get current DF
  639 01272 1170          TAD [CDF                / make into CDF<D>
  640 01273 3331          DCA CPMEM9              / save for return
  641 01274 6224          RIF                     / get current IF
  642 01275 1170          TAD [CDF                / make into CDF<I>
  643 01276 3277          DCA .+1                 / store
  644 01277 7402          HLT                     / replaced with CDF<I>  
  645 01300 1667          TAD I CPMEM             / get SRCFIELD
  646 01301 1170          TAD [CDF                / make into CDF<S>
  647 01302 3316          DCA CPMEM7              / store
  648 01303 2267          ISZ CPMEM               / bump
  649 01304 1667          TAD I CPMEM             / get SRCADDR
  650 01305 3334          DCA CPMEMS              / store
  651 01306 2267          ISZ CPMEM               / bump
  652 01307 1667          TAD I CPMEM             / get DSTFIELD
  653 01310 1170          TAD [CDF                / make into CDF<T>
  654 01311 3322          DCA CPMEM8              / store
  655 01312 2267          ISZ CPMEM               / bump
  656 01313 1667          TAD I CPMEM             / get DSTADDR
  657 01314 3335          DCA CPMEMD              / store
  658 01315 2267          ISZ CPMEM               / bump
  659 01316 7402  CPMEM7, HLT                     / replaced with CDF<S>
  660 01317 1734          TAD I CPMEMS            / get src data
  661 01320 2334          ISZ CPMEMS              / bump ptr
  662 01321 7000           NOP                    / allow for zero
  663 01322 7402  CPMEM8, HLT                     / replaced with CDF<T>
  664 01323 3735          DCA I CPMEMD            / store dst data
  665 01324 2335          ISZ CPMEMD              / bump ptr
  666 01325 7000           NOP                    / allow for zero
  667 01326 2333          ISZ CPMEMX              / count words
  668 01327 5316           JMP CPMEM7             / loop  
  669 01330 7200          CLA                     / zero
  670 01331 7402  CPMEM9, HLT                     / replaced with CDF<D>
  671 01332 5667          JMP I CPMEM             / return
  672             
  673 01333 0000  CPMEMX, 0                       / -count of words
  674 01334 0000  CPMEMS, 0                       / source address
  675 01335 0000  CPMEMD, 0                       / target address
  676             
  677                     PAGE

      simple MEMORY test                                                 Page 20


  678                     EJECT
  679             / ------------------------------------------------------------
  680             /
  681             / octal print routine of AC (4 digit)
  682             /
  683             /   return with AC=0
  684             /   uses TMP1-2
  685             
  686       0042  VALUE=TMP1
  687       0043  COUNT=TMP2
  688             
  689 01400 0000  PROCT,  0                       / return address
  690 01401 7104          CLL RAL                 / rotate into L,AC<0:10>
  691 01402 3042          DCA VALUE               / save number
  692 01403 1141          TAD [-4                 / digit count
  693 01404 3043          DCA COUNT               / save
  694 01405 1042  PROCT1, TAD VALUE               / rotate number left 3
  695 01406 7006          RTL ; RAL               /
      01407 7004
  696 01410 3042          DCA VALUE               / save other bits
  697 01411 1042          TAD VALUE               /
  698 01412 0175          AND [0007               / mask digit
  699 01413 1152          TAD [0260               / make ascii
  700 01414 4551          JMS I [PRCHR            / print one char
  701 01415 2043          ISZ COUNT               / count digits
  702 01416 5205           JMP PROCT1             / loop
  703 01417 5600          JMP I PROCT             / return
  704             

      simple MEMORY test                                                 Page 21


  705                     EJECT
  706             / ------------------------------------------------------------
  707             /
  708             / text print routine, addr of string in next word
  709             / string is two 6b characters per word
  710             / 00(@) to terminate string, 37(_) prints CRLF sequence
  711             /
  712             /   return with AC=0
  713             /   uses TMP1
  714             /   uses indirect data address mode
  715             
  716       0042  STPTR=TMP1
  717             
  718 01420 0000  PRAST,  0                       / return address
  719 01421 7200          CLA                     / zero
  720 01422 1620          TAD I PRAST             / get ptr to string
  721 01423 3042          DCA STPTR               / store ptr
  722 01424 2220          ISZ PRAST               / bump addr +1
  723 01425 1442  PRAST1, TAD I STPTR             / get two chars
  724 01426 7002          BSW                     / move upper 6b to low
  725 01427 4234          JMS PRAST2              / go print
  726 01430 1442          TAD I STPTR             / get two chars
  727 01431 4234          JMS PRAST2              / go print
  728 01432 2042          ISZ STPTR               / bump ptr
  729 01433 5225          JMP PRAST1              / loop  
  730             
  731             / print one 6b char in AC<6:11> as 8b ascii
  732             
  733 01434 0000  PRAST2, 0                       / return address
  734 01435 0140          AND [77                 / mask low 6b
  735 01436 7450          SNA                     / skip if not 00
  736 01437 5620           JMP I PRAST            / return from caller
  737 01440 1137          TAD [-37                / check for 37
  738 01441 7440          SZA                     / skip if 37
  739 01442 5245           JMP PRAST3             / jmp if not 37
  740 01443 4550          JMS I [PREOL            / print CRLF
  741 01444 5634          JMP I PRAST2            / return
  742 01445 7510  PRAST3, SPA                     / skip if 40..77
  743 01446 1136           TAD [100               / 01..36 maps to 301..336
  744 01447 1135          TAD [237                / 40..77 maps to 240..277
  745 01450 4551          JMS I [PRCHR            / print character
  746 01451 5634          JMP I PRAST2            / return
  747             
  748             / TEXT ~@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_~ / 00..37 -> 300..337
  749             / TEXT ~ !"#$%&'()*+,-./0123456789:;<=>?~ / 40..77 -> 240..277
  750             

      simple MEMORY test                                                 Page 22


  751                     EJECT
  752             / ------------------------------------------------------------
  753             /
  754             / print a SPACE
  755             /
  756             /   return with AC=0
  757             
  758 01452 0000  PRSPA,  0                       / return address
  759 01453 7200          CLA                     / zero
  760 01454 1134          TAD [240                / SP
  761 01455 4551          JMS I [PRCHR            / print one char
  762 01456 5652          JMP I PRSPA             / return
  763             
  764             / ------------------------------------------------------------
  765             /
  766             / print a BELL
  767             /
  768             /   return with AC=0
  769             
  770 01457 0000  PRBEL,  0                       / return address
  771 01460 7200          CLA                     / zero
  772 01461 1133          TAD [207                / BELL
  773 01462 4551          JMS I [PRCHR            / print one char
  774 01463 5657          JMP I PRBEL             / return
  775             
  776             / ------------------------------------------------------------
  777             /
  778             / print a CRLF sequence
  779             /
  780             /   return with AC=0
  781             
  782 01464 0000  PREOL,  0                       / return address
  783 01465 7200          CLA                     / zero
  784 01466 1147          TAD [215                / CR
  785 01467 4551          JMS I [PRCHR            / print one char
  786 01470 1132          TAD [212                / CR
  787 01471 4551          JMS I [PRCHR            / print one char
  788 01472 5664          JMP I PREOL             / return
  789             
  790             / ------------------------------------------------------------
  791             /
  792             / print one character from AC
  793             /
  794             /   return with AC=0
  795             
  796 01473 0000  PRCHR,  0                       / return address
  797 01474 6041          TSF                     / wait for done
  798 01475 5274           JMP .-1                / loop until done
  799 01476 0131          AND [177                / mask to 7 bits
  800 01477 6046          TLS                     / print character
  801 01500 7200          CLA                     / zero
  802 01501 5673          JMP I PRCHR             / return
  803             

      simple MEMORY test                                                 Page 23


  804                     EJECT
  805             / ------------------------------------------------------------
  806             /
  807             / get h/w or s/w switch register, as appropriate
  808             /
  809             /   return with AC=SR
  810             
  811 01502 0000  READSR, 0                       / return address
  812 01503 7215          CLA IAC R3L             / generate 0010 on HD6120 only
  813 01504 1173          TAD [-10                / expected
  814 01505 7440          SZA                     / skip if matches
  815 01506 5311           JMP .+3                / non-6120 cpu, go do LAS
  816 01507 1040          TAD SSR                 / load s/w switches
  817 01510 7410          SKP                     / skip over next
  818 01511 7604           LAS                    / load h/w switches
  819 01512 5702          JMP I READSR            / return
  820             

      simple MEMORY test                                                 Page 24


  821                     EJECT
  822             / ------------------------------------------------------------
  823             /
  824             / ptr <- ptr+1
  825             / uses TMP1
  826             
  827       0042  SAVEAC=TMP1
  828             
  829 01513 0000  PTRINC, 0                       / return address
  830 01514 3042          DCA SAVEAC              / save AC
  831 01515 7001          IAC                     / +1
  832 01516 1041          TAD PTR                 / PTR+1
  833 01517 3041          DCA PTR                 / save
  834 01520 1042          TAD SAVEAC              / restore AC
  835 01521 5713          JMP I PTRINC            / return
  836             
  837             / ------------------------------------------------------------
  838             /
  839             / ptr <- ptr-1
  840             / uses TMP1
  841             
  842       0042  SAVEAC=TMP1
  843             
  844 01522 0000  PTRDEC, 0                       / return address
  845 01523 3042          DCA SAVEAC              / save AC
  846 01524 7040          CMA                     / -1
  847 01525 1041          TAD PTR                 / PTR-1
  848 01526 3041          DCA PTR                 / save
  849 01527 1042          TAD SAVEAC              / restore AC
  850 01530 5722          JMP I PTRDEC            / return
  851             

      simple MEMORY test                                                 Page 25


  852                     EJECT
  853             / ------------------------------------------------------------
  854             /
  855             / set DF to current test field, adjust PTR as necessary
  856             /
  857             /   setup MEMBEG,MEMCNT depending upon DF selected
  858             /   setup PTR to MEMBEG or MEMEND
  859             /   return with AC=PASSES
  860             
  861 01531 0000  SETUPI, 0                       / return address
  862 01532 4347          JMS SETUPX              / common setup
  863 01533 1053          TAD MEMBEG              / starting test location
  864 01534 3041          DCA PTR                 / into memory ptr
  865 01535 1051          TAD PASSES              / get passcount into AC
  866 01536 1041          TAD PTR                 / start at ptr
  867 01537 5731          JMP I SETUPI            / return
  868             
  869 01540 0000  SETUPD, 0                       / return address
  870 01541 4347          JMS SETUPX              / common setup
  871 01542 1054          TAD MEMEND              / ending test location
  872 01543 3041          DCA PTR                 / into memory ptr
  873 01544 1051          TAD PASSES              / get passcount into AC
  874 01545 1041          TAD PTR                 / start at ptr
  875 01546 5740          JMP I SETUPD            / return
  876             
  877 01547 0000  SETUPX, 0                       / return address
  878 01550 4056          JMS SETTDF              / set test data field
  879 01551 7300          CLA CLL                 / clear AC and LK
  880 01552 1057          TAD SETTDF+1            / get test DF
  881 01553 7041          CIA                     / negate for test
  882 01554 1064          TAD SETCDF+1            / get current DF
  883 01555 7650          SNA CLA                 / skip if not equal; clr AC
  884 01556 5362           JMP SETUP1             / jmp if equal
  885 01557 3053          DCA MEMBEG              / set MEMBEG to 0000
  886 01560 3055          DCA MEMCNT              / set MEMCNT to -10000
  887 01561 5370          JMP SETUP2              / continue
  888 01562 1130  SETUP1, TAD [MEMTST             / first free location
  889 01563 3053          DCA MEMBEG              / set MEMBEG to MEMTST
  890 01564 1054          TAD MEMEND              / MEMEND
  891 01565 7040          CMA                     / -(MEMEND+1)
  892 01566 1053          TAD MEMBEG              / MEMBEG-(MEMEND+1)
  893 01567 3055          DCA MEMCNT              / into MEMCNT
  894 01570 5747  SETUP2, JMP I SETUPX            / return
  895             

      simple MEMORY test                                                 Page 26


  896                     EJECT
  897             / ------------------------------------------------------------
  898             
  899                     PAGE                    / start of next page
  900 01600 0000  LOADER, ZBLOCK 200              /
      01601 0000
      01602 0000
      01603 0000
      01604 0000
      01605 0000
      01606 0000
      01607 0000
      01610 0000
      01611 0000
      01612 0000
      01613 0000
      01614 0000
      01615 0000
      01616 0000
      01617 0000
      01620 0000
      01621 0000
      01622 0000
      01623 0000
      01624 0000
      01625 0000
      01626 0000
      01627 0000
      01630 0000
      01631 0000
      01632 0000
      01633 0000
      01634 0000
      01635 0000
      01636 0000
      01637 0000
      01640 0000
      01641 0000
      01642 0000
      01643 0000
      01644 0000
      01645 0000
      01646 0000
      01647 0000
      01650 0000
      01651 0000
      01652 0000
      01653 0000
      01654 0000
      01655 0000
      01656 0000
      01657 0000
      01660 0000
      01661 0000
      01662 0000
      01663 0000
      01664 0000

      simple MEMORY test                                                 Page 27


      01665 0000
      01666 0000
      01667 0000
      01670 0000
      01671 0000
      01672 0000
      01673 0000
      01674 0000
      01675 0000
      01676 0000
      01677 0000
      01700 0000
      01701 0000
      01702 0000
      01703 0000
      01704 0000
      01705 0000
      01706 0000
      01707 0000
      01710 0000
      01711 0000
      01712 0000
      01713 0000
      01714 0000
      01715 0000
      01716 0000
      01717 0000
      01720 0000
      01721 0000
      01722 0000
      01723 0000
      01724 0000
      01725 0000
      01726 0000
      01727 0000
      01730 0000
      01731 0000
      01732 0000
      01733 0000
      01734 0000
      01735 0000
      01736 0000
      01737 0000
      01740 0000
      01741 0000
      01742 0000
      01743 0000
      01744 0000
      01745 0000
      01746 0000
      01747 0000
      01750 0000
      01751 0000
      01752 0000
      01753 0000
      01754 0000
      01755 0000

      simple MEMORY test                                                 Page 28


      01756 0000
      01757 0000
      01760 0000
      01761 0000
      01762 0000
      01763 0000
      01764 0000
      01765 0000
      01766 0000
      01767 0000
      01770 0000
      01771 0000
      01772 0000
      01773 0000
      01774 0000
      01775 0000
      01776 0000
      01777 0000
  901             
  902             / ------------------------------------------------------------
  903             
  904                     PAGE                    / start of next page
  905             MEMTST,                         / dummy
  906             
  907             / ------------------------------------------------------------
  908             
  909             / autostart program after download via RIMLDR
  910             
  911       0000  *0                              / page 0
      00130 2000
      00131 0177
      00132 0212
      00133 0207
      00134 0240
      00135 0237
      00136 0100
      00137 7741
      00140 0077
      00141 7774
      00142 1452
      00143 1751
      00144 7743
      00145 0017
      00146 1700
      00147 0215
      00150 1464
      00151 1473
      00152 0260
      00153 1400
      00154 1420
      00155 1457
      00156 1000
      00157 1141
      00160 1107
      00161 1522
      00162 1540
      00163 1200

      simple MEMORY test                                                 Page 29


      00164 1513
      00165 1531
      00166 1062
      00167 0400
      00170 6201
      00171 0070
      00172 1502
      00173 7770
      00174 6440
      00175 0007
      00176 1267
      00177 7600
  912                     LITBAS                  / force all literals out
  913       7751  *7751                           / align to RIMLDR location
  914 07751 0200          START                   / addr of program start
  915 07752 6032          KCC                     / first instr in std RIMLDR
  916 07753 1352          TAD .-1                 / get KCC instr
  917 07754 3356          DCA .+2                 / restore into RIMLDR
  918 07755 5751          JMP I .-4               / start program
  919 07756 5353          JMP .-3                 / overlay first word of RIMLDR
  920             

      No detected errors

      simple MEMORY test                                                 Page 30
                                                                    Symbol Table

    1  CHK2   01104   SETUPI 01531 
    2  CHKTST 01062   SETUPX 01547 
    3  COUNT   0043   SIF     0001 
    4  CPMEM  01267   SSR    00040 
    5  CPMEM7 01316   START  00200 
    6  CPMEM8 01322   STPTR   0042 
    7  CPMEM9 01331   TEST   00050 
    8  CPMEMD 01335   TMP1   00042 
    9  CPMEMS 01334   TMP2   00043 
   10  CPMEMX 01333   TMP3   00044 
   11  EOP    01000   TMP4   00045 
   12  EOPM1  01044   TST1   00400 
   13  EOPM2  01051   TST10  00727 
   14  EOPM3  01055   TST10A 00734 
   15  ERRORS 00052   TST10B 00743 
   16  EXP    00046   TST10C 00754 
   17  INIT   00000   TST1A  00404 
   18  LEDS   00225   TST1B  00415 
   19  LOADER 01600   TST1C  00427 
   20  LOOP   00215   TST2   00435 
   21  MEMBEG 00053   TST2A  00441 
   22  MEMCNT 00055   TST2B  00452 
   23  MEMEND 00054   TST2C  00464 
   24  MEMTST 02000   TST3   00472 
   25  MULT    0042   TST3A  00476 
   26  PASSES 00051   TST3B  00510 
   27  PRAST  01420   TST3C  00524 
   28  PRAST1 01425   TST4   00532 
   29  PRAST2 01434   TST4A  00536 
   30  PRAST3 01445   TST4B  00550 
   31  PRBEL  01457   TST4C  00564 
   32  PRCHR  01473   TST5   00572 
   33  PREOL  01464   TST5A  00576 
   34  PROCT  01400   TST5B  00611 
   35  PROCT1 01405   TST5C  00626 
   36  PRSPA  01452   TST6   00634 
   37  PRTER1 01212   TST6A  00640 
   38  PRTER2 01246   TST6B  00653 
   39  PRTERR 01200   TST6C  00670 
   40  PTR    00041   TST7   00676 
   41  PTRDEC 01522   TST7A  00703 
   42  PTRINC 01513   TST7B  00712 
   43  R3L     7014   TST7C  00723 
   44  RAND1  01124   VALUE   0042 
   45  RAND1A 01132 
   46  RAND2  01141 
   47  RCV    00047 
   48  READSR 01502 
   49  ROT1   01116 
   50  ROTPAT 01107 
   51  SAVEAC  0042 
   52  SDF     0000 
   53  SETCDF 00063 
   54  SETTDF 00056 
   55  SETUP1 01562 
   56  SETUP2 01570 
   57  SETUPD 01540 

      simple MEMORY test                                                 Page 31
                                                                 Cross Reference

    1 A    496  CHK2        488    491
    2 A    478  CHKTST      121    157    193    232    271    312    353    389
    3                       482    489    492    493    494    495    496    497
    4                       498
    5 A    687  COUNT       516    521    539    543    693    701
    6 A    636  CPMEM        82    431    645    648    649    651    652    655
    7                       656    658    671
    8 A    659  CPMEM7      647    668
    9 A    663  CPMEM8      654
   10 A    670  CPMEM9      640
   11 A    675  CPMEMD      657    664    665
   12 A    674  CPMEMS      650    660    661
   13 A    673  CPMEMX      637    667
   14 A    425  EOP         391    391    417
   15 A    464  EOPM1       441    441
   16 A    465  EOPM2       445    445
   17 A    466  EOPM3       452    452
   18 A     42  ERRORS       78    453    584    595    615
   19 A     38  EXP         141    177    216    255    296    337    374    410
   20                       608    612
   21 A     26  INIT    
   22 A    100  LEDS         96
   23 A    900  LOADER       86     86    433    433
   24 A     92  LOOP        460    462
   25 A     43  MEMBEG      863    885    889    892
   26 A     45  MEMCNT      130    145    166    181    203    220    242    259
   27                       282    300    323    341    362    377    398    413
   28                       886    893
   29 A     44  MEMEND      871    890
   30 A    905  MEMTST      888
   31 A    556  MULT        541    542    560    561    564    565    566    569
   32 A     41  PASSES       77     93    425    442    513    592    865    873
   33 A    718  PRAST       440    444    451    589    720    722    736
   34 A    723  PRAST1      729
   35 A    733  PRAST2      725    727    741    746
   36 A    742  PRAST3      739
   37 A    770  PRBEL       439    774
   38 A    796  PRCHR       450    604    700    745    761    773    785    787
   39                       802
   40 A    782  PREOL       455    614    740    788
   41 A    689  PROCT       443    454    593    596    599    606    609    613
   42                       703
   43 A    694  PROCT1      702
   44 A    758  PRSPA       594    597    600    607    610    762
   45 A    592  PRTER1      587
   46 A    620  PRTER2      590    590
   47 A    582  PRTERR      142    178    217    256    297    338    375    411
   48                       618
   49 A     33  PTR         127    136    163    172    200    210    239    249
   50                       279    289    320    330    360    369    396    405
   51                       605    832    833    847    848    864    866    872
   52                       874
   53 A    844  PTRDEC      165    180    241    258    322    340    397    412
   54                       850
   55 A    829  PTRINC      129    144    202    219    281    299    361    376
   56                       835
   57 A     47  R3L          97    812

      simple MEMORY test                                                 Page 32
                                                                 Cross Reference

   58 A    536  RAND1       547
   59 A    542  RAND1A      544
   60 A    558  RAND2       359    367    395    403    572
   61 A     39  RCV         139    175    213    252    292    333    372    408
   62                       611
   63 A    811  READSR      102    437    457    485    819
   64 A    518  ROT1        522
   65 A    511  ROTPAT      199    208    215    238    247    254    277    287
   66                       294    318    328    335    523
   67 A    842  SAVEAC      512    517    830    834    845    849
   68 A     17  SDF          55     56     57
   69 A     64  SETCDF       68    109    148    184    223    262    303    344
   70                       380    416    588    882
   71 A     54  SETTDF       58    106    446    591    878    880
   72 A    888  SETUP1      884
   73 A    894  SETUP2      887
   74 A    869  SETUPD      161    169    236    245    316    326    393    401
   75                       875
   76 A    861  SETUPI      125    133    197    206    275    285    357    365
   77                       867
   78 A    877  SETUPX      862    870    894
   79 A     20  SIF          65     66     67
   80 A     32  SSR         816
   81 A     75  START       914    914
   82 A    716  STPTR       721    723    726    728
   83 A     40  TEST        110    480    481    598
   84 A     34  TMP1        508    533    556    686    716    827    842
   85 A     35  TMP2        509    534    687
   86 A     36  TMP3    
   87 A     37  TMP4    
   88 A    121  TST1        111
   89 A    389  TST10       355    355
   90 A    395  TST10A      399
   91 A    403  TST10B      414
   92 A    412  TST10C      407
   93 A    126  TST1A       131
   94 A    134  TST1B       146
   95 A    143  TST1C       138
   96 A    157  TST2        123    123
   97 A    162  TST2A       167
   98 A    170  TST2B       182
   99 A    179  TST2C       174
  100 A    193  TST3        159    159
  101 A    198  TST3A       204
  102 A    207  TST3B       221
  103 A    218  TST3C       212
  104 A    232  TST4        195    195
  105 A    237  TST4A       243
  106 A    246  TST4B       260
  107 A    257  TST4C       251
  108 A    271  TST5        234    234
  109 A    276  TST5A       283
  110 A    286  TST5B       301
  111 A    298  TST5C       291
  112 A    312  TST6        273    273
  113 A    317  TST6A       324
  114 A    327  TST6B       342

      simple MEMORY test                                                 Page 33
                                                                 Cross Reference

  115 A    339  TST6C       332
  116 A    353  TST7        314    314
  117 A    359  TST7A       363
  118 A    367  TST7B       378
  119 A    376  TST7C       371
  120 A    686  VALUE       691    694    696    697

      simple MEMORY test                                                 Page 34
                                                                      Memory Map

    1 00000/ XXXX.... ........ ........ ........ XXXXXXXX XXXXXXXX XXXXXXXX ........
    2 00100/ ........ ........ ........ XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX
    3
    4 00200/ XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX X....... ........ ........ ........
    5 00300/ ........ ........ ........ ........ ........ ........ ........ ........
    6
    7 00400/ XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX
    8 00500/ XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX
    9
   10 00600/ XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX
   11 00700/ XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX X....... .......X
   12
   13 01000/ XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX
   14 01100/ XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX X....... ........
   15
   16 01200/ XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX
   17 01300/ XXXXXXXX XXXXXXXX XXXXXXXX XXXXXX.. ........ ........ ........ ........
   18
   19 01400/ XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX
   20 01500/ XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX X.......
   21
   22 01600/ XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX
   23 01700/ XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX
   24
   25 02000/ ........ ........ ........ ........ ........ ........ ........ ........
   26 02100/ ........ ........ ........ ........ ........ ........ ........ ........
   27
   28 02200/ ........ ........ ........ ........ ........ ........ ........ ........
   29 02300/ ........ ........ ........ ........ ........ ........ ........ ........
   30
   31 02400/ ........ ........ ........ ........ ........ ........ ........ ........
   32 02500/ ........ ........ ........ ........ ........ ........ ........ ........
   33
   34 02600/ ........ ........ ........ ........ ........ ........ ........ ........
   35 02700/ ........ ........ ........ ........ ........ ........ ........ ........
   36
   37 03000/ ........ ........ ........ ........ ........ ........ ........ ........
   38 03100/ ........ ........ ........ ........ ........ ........ ........ ........
   39
   40 03200/ ........ ........ ........ ........ ........ ........ ........ ........
   41 03300/ ........ ........ ........ ........ ........ ........ ........ ........
   42
   43 03400/ ........ ........ ........ ........ ........ ........ ........ ........
   44 03500/ ........ ........ ........ ........ ........ ........ ........ ........
   45
   46 03600/ ........ ........ ........ ........ ........ ........ ........ ........
   47 03700/ ........ ........ ........ ........ ........ ........ ........ ........
   48

      simple MEMORY test                                                 Page 35
                                                                      Memory Map

   49 04000/ ........ ........ ........ ........ ........ ........ ........ ........
   50 04100/ ........ ........ ........ ........ ........ ........ ........ ........
   51
   52 04200/ ........ ........ ........ ........ ........ ........ ........ ........
   53 04300/ ........ ........ ........ ........ ........ ........ ........ ........
   54
   55 04400/ ........ ........ ........ ........ ........ ........ ........ ........
   56 04500/ ........ ........ ........ ........ ........ ........ ........ ........
   57
   58 04600/ ........ ........ ........ ........ ........ ........ ........ ........
   59 04700/ ........ ........ ........ ........ ........ ........ ........ ........
   60
   61 05000/ ........ ........ ........ ........ ........ ........ ........ ........
   62 05100/ ........ ........ ........ ........ ........ ........ ........ ........
   63
   64 05200/ ........ ........ ........ ........ ........ ........ ........ ........
   65 05300/ ........ ........ ........ ........ ........ ........ ........ ........
   66
   67 05400/ ........ ........ ........ ........ ........ ........ ........ ........
   68 05500/ ........ ........ ........ ........ ........ ........ ........ ........
   69
   70 05600/ ........ ........ ........ ........ ........ ........ ........ ........
   71 05700/ ........ ........ ........ ........ ........ ........ ........ ........
   72
   73 06000/ ........ ........ ........ ........ ........ ........ ........ ........
   74 06100/ ........ ........ ........ ........ ........ ........ ........ ........
   75
   76 06200/ ........ ........ ........ ........ ........ ........ ........ ........
   77 06300/ ........ ........ ........ ........ ........ ........ ........ ........
   78
   79 06400/ ........ ........ ........ ........ ........ ........ ........ ........
   80 06500/ ........ ........ ........ ........ ........ ........ ........ ........
   81
   82 06600/ ........ ........ ........ ........ ........ ........ ........ ........
   83 06700/ ........ ........ ........ ........ ........ ........ ........ ........
   84
   85 07000/ ........ ........ ........ ........ ........ ........ ........ ........
   86 07100/ ........ ........ ........ ........ ........ ........ ........ ........
   87
   88 07200/ ........ ........ ........ ........ ........ ........ ........ ........
   89 07300/ ........ ........ ........ ........ ........ ........ ........ ........
   90
   91 07400/ ........ ........ ........ ........ ........ ........ ........ ........
   92 07500/ ........ ........ ........ ........ ........ ........ ........ ........
   93
   94 07600/ ........ ........ ........ ........ ........ ........ ........ ........
   95 07700/ ........ ........ ........ ........ ........ .XXXXXX. ........ ........
   96
